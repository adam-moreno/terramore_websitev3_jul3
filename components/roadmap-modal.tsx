"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { X, Download, Mail } from "lucide-react"

interface RoadmapModalProps {
  isOpen: boolean
  onClose: () => void
}

export function RoadmapModal({ isOpen, onClose }: RoadmapModalProps) {
  const [step, setStep] = useState(1)
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    businessName: "",
    industry: "",
    currentRevenue: "",
    businessStage: "",
    biggestChallenge: "",
    goals: ""
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isSubmitted, setIsSubmitted] = useState(false)

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    
    try {
      const response = await fetch('/api/roadmap', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      if (!response.ok) {
        throw new Error('Failed to submit roadmap request')
      }

      const result = await response.json()
      console.log("Roadmap submitted successfully:", result)
      
    } catch (error) {
      console.error("Error submitting roadmap:", error)
      // You could show an error message here
    } finally {
      setIsSubmitting(false)
      setIsSubmitted(true)
    }
  }

  const generateRoadmap = () => {
    // This would be replaced with actual roadmap generation logic
    const roadmap = {
      title: `90-Day Growth Roadmap for ${formData.businessName || "Your Business"}`,
      industry: formData.industry,
      stage: formData.businessStage,
      challenges: formData.biggestChallenge,
      goals: formData.goals,
      steps: [
        {
          week: "Weeks 1-2",
          title: "Foundation & Assessment",
          tasks: [
            "Audit current customer journey and touchpoints",
            "Identify key performance indicators (KPIs)",
            "Set up analytics and tracking systems",
            "Define target audience personas"
          ]
        },
        {
          week: "Weeks 3-4",
          title: "Strategy Development",
          tasks: [
            "Create content strategy aligned with audience needs",
            "Design lead capture and nurturing sequences",
            "Plan automation workflows",
            "Develop conversion optimization strategy"
          ]
        },
        {
          week: "Weeks 5-8",
          title: "Implementation & Testing",
          tasks: [
            "Launch initial marketing campaigns",
            "Set up automation systems",
            "Begin A/B testing on key pages",
            "Monitor and adjust based on data"
          ]
        },
        {
          week: "Weeks 9-12",
          title: "Optimization & Scale",
          tasks: [
            "Analyze performance data and optimize",
            "Scale successful campaigns",
            "Implement advanced automation",
            "Plan next quarter's growth initiatives"
          ]
        }
      ]
    }
    
    return roadmap
  }

  const downloadRoadmap = () => {
    const roadmap = generateRoadmap()
    const content = `
${roadmap.title}
=====================================

INDUSTRY: ${roadmap.industry}
BUSINESS STAGE: ${roadmap.stage}
CURRENT CHALLENGE: ${roadmap.challenges}
GOALS: ${roadmap.goals}

${roadmap.steps.map(step => `
${step.week} - ${step.title}
${step.tasks.map(task => `â€¢ ${task}`).join('\n')}
`).join('\n')}

=====================================
Generated by Terramore.io
For personalized guidance, book a strategy call at terramore.io
    `.trim()

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${formData.businessName || 'Business'}-Roadmap.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6 md:p-8">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl md:text-3xl font-bold text-gray-900">
              {isSubmitted ? "Your Roadmap is Ready!" : "Get Your Custom Business Roadmap"}
            </h2>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700"
            >
              <X className="w-5 h-5" />
            </Button>
          </div>

          {!isSubmitted ? (
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="firstName">First Name *</Label>
                  <Input
                    id="firstName"
                    value={formData.firstName}
                    onChange={(e) => handleInputChange("firstName", e.target.value)}
                    required
                    className="mt-1"
                  />
                </div>
                <div>
                  <Label htmlFor="lastName">Last Name *</Label>
                  <Input
                    id="lastName"
                    value={formData.lastName}
                    onChange={(e) => handleInputChange("lastName", e.target.value)}
                    required
                    className="mt-1"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="email">Email Address *</Label>
                <Input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange("email", e.target.value)}
                  required
                  className="mt-1"
                />
              </div>

              <div>
                <Label htmlFor="businessName">Business Name *</Label>
                <Input
                  id="businessName"
                  value={formData.businessName}
                  onChange={(e) => handleInputChange("businessName", e.target.value)}
                  required
                  className="mt-1"
                />
              </div>

              <div>
                <Label htmlFor="industry">Industry *</Label>
                <Select value={formData.industry} onValueChange={(value) => handleInputChange("industry", value)}>
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="Select your industry" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="service-business">Service Business</SelectItem>
                    <SelectItem value="ecommerce">E-commerce</SelectItem>
                    <SelectItem value="saas">SaaS/Software</SelectItem>
                    <SelectItem value="consulting">Consulting</SelectItem>
                    <SelectItem value="coaching">Coaching</SelectItem>
                    <SelectItem value="real-estate">Real Estate</SelectItem>
                    <SelectItem value="healthcare">Healthcare</SelectItem>
                    <SelectItem value="finance">Finance</SelectItem>
                    <SelectItem value="education">Education</SelectItem>
                    <SelectItem value="other">Other</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="currentRevenue">Current Monthly Revenue</Label>
                <Select value={formData.currentRevenue} onValueChange={(value) => handleInputChange("currentRevenue", value)}>
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="Select revenue range" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="0-1000">$0 - $1,000</SelectItem>
                    <SelectItem value="1000-5000">$1,000 - $5,000</SelectItem>
                    <SelectItem value="5000-10000">$5,000 - $10,000</SelectItem>
                    <SelectItem value="10000-25000">$10,000 - $25,000</SelectItem>
                    <SelectItem value="25000-50000">$25,000 - $50,000</SelectItem>
                    <SelectItem value="50000-100000">$50,000 - $100,000</SelectItem>
                    <SelectItem value="100000+">$100,000+</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="businessStage">Business Stage *</Label>
                <Select value={formData.businessStage} onValueChange={(value) => handleInputChange("businessStage", value)}>
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="Select your business stage" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="idea">Just an idea</SelectItem>
                    <SelectItem value="startup">Startup (0-2 years)</SelectItem>
                    <SelectItem value="growing">Growing business (2-5 years)</SelectItem>
                    <SelectItem value="established">Established business (5+ years)</SelectItem>
                    <SelectItem value="scaling">Ready to scale</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="biggestChallenge">What's your biggest business challenge right now? *</Label>
                <Textarea
                  id="biggestChallenge"
                  value={formData.biggestChallenge}
                  onChange={(e) => handleInputChange("biggestChallenge", e.target.value)}
                  required
                  className="mt-1"
                  rows={3}
                  placeholder="e.g., Not enough leads, low conversion rates, scaling operations..."
                />
              </div>

              <div>
                <Label htmlFor="goals">What are your main business goals for the next 90 days? *</Label>
                <Textarea
                  id="goals"
                  value={formData.goals}
                  onChange={(e) => handleInputChange("goals", e.target.value)}
                  required
                  className="mt-1"
                  rows={3}
                  placeholder="e.g., Increase revenue by 50%, automate lead generation, launch new product..."
                />
              </div>

              <Button
                type="submit"
                className="w-full bg-blue-600 hover:bg-blue-700 text-white py-4 text-lg font-semibold rounded-lg"
                disabled={isSubmitting}
              >
                {isSubmitting ? "Generating Your Roadmap..." : "Generate My Custom Roadmap"}
              </Button>

              <p className="text-sm text-gray-500 text-center">
                By submitting this form, you agree to receive marketing communications from Terramore.io. 
                You can unsubscribe at any time.
              </p>
            </form>
          ) : (
            <div className="text-center space-y-6">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto">
                <Download className="w-8 h-8 text-green-600" />
              </div>
              
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">
                  Your personalized roadmap has been generated!
                </h3>
                <p className="text-gray-600">
                  We've also sent it to {formData.email} for easy access.
                </p>
              </div>

              <div className="space-y-4">
                <Button
                  onClick={downloadRoadmap}
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white py-4 text-lg font-semibold rounded-lg"
                >
                  <Download className="w-5 h-5 mr-2" />
                  Download Roadmap
                </Button>

                <Button
                  onClick={() => {
                    // This would open your scheduling system
                    window.open('https://calendly.com/your-calendar', '_blank')
                  }}
                  variant="outline"
                  className="w-full border-blue-600 text-blue-600 hover:bg-blue-50 py-4 text-lg font-semibold rounded-lg"
                >
                  <Mail className="w-5 h-5 mr-2" />
                  Schedule Strategy Call
                </Button>
              </div>

              <div className="bg-blue-50 rounded-lg p-4">
                <h4 className="font-semibold text-blue-900 mb-2">What's Next?</h4>
                <ul className="text-sm text-blue-800 space-y-1">
                  <li>â€¢ Review your personalized roadmap</li>
                  <li>â€¢ Book a strategy call to discuss implementation</li>
                  <li>â€¢ Check your email for additional resources</li>
                </ul>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
} 